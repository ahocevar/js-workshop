.. _geoext.javascript.layouts:

Laying Out Web Pages with Ext JS
================================

Ext JS works well for developers that are used to Desktop widget toolkits - it
has a set of easy to use components that can be arranged using different kinds
of layout managers. This chapter gives a quick overview of commonly used
layouts and components.


Mixing DOM and Ext JS Generated Output
--------------------------------------

If you have a DOM generated web page and want to fill the whole space of a
container element with an Ext Panel, the following would work:

.. code-block:: html

    <div class="demo-panel" style="width:128px;height:128px"></div>
    <script type="text/javascript">
        var container = Ext.query(".demo-panel")[0];
        new Ext.Panel({
            html: "lore ipsum dolor sit amet",
            renderTo: container,
            height: Ext.fly(container).getHeight()
        });
    </script>

The same can be done the other way around: an Ext component that determines the
size and takes its content from a DOM element:

.. code-block:: html

    <div class="demo-text">
        <div class="x-panel-body">lore ipsum dolor sit amet</div>
    </div>
    <script type="text/javascript">
        new Ext.Panel({
            applyTo: Ext.query(".demo-text")[0],
            width: 128,
            height: 128
        });
    </script>

Note that in the first snippet, we used :obj:`renderTo` to configure the target
of the panel, and in the second snippet we used :obj:`applyTo` to point to the
source of the panel content. In both examples, we didn't us ids, but the
``class`` attribute. Why? Assuming that the DOM is generated by a server side
templating system, it is usually not safe to rely on ids.

Everything in Ext JS that inherits from `Ext.BoxComponent
<http://docs.sencha.com/ext-js/3-4/#!/api/Ext.BoxComponent>`_ works this way.


Layouts
-------

:class:`Ext.BoxComponent` is a component which occupies a rectangular space,
and usually contains simple markup, e.g. a form field. The next level in the
class hierarchy is `Ext.Container
<http://docs.sencha.com/ext-js/3-4/#!/api/Ext.Container>`_, which can have
one or more child components (configured through the :obj:`items` config
option), or added later using the :meth:`add` method. Items can be arranged
using a `layout manager
<http://docs.sencha.com/ext-js/3-4/#!/api/Ext.Container-cfg-layout>`_. We won't
discuss all layouts here - they are well described in the `Layout Browser
<http://dev.sencha.com/deploy/ext-3.4.0/examples/layout-browser/layout-browser.html>`_.

The Layout Browser uses a special container, `Ext.Viewport
<http://docs.sencha.com/ext-js/3-4/#!/api/Ext.Viewport>`_, which does not
support :obj:`width` and :obj:`height` properties and has no :obj:`renderTo`
option. Instead, it takes the whole available space of the browser window. It
is usually configured with a `Ext.layout.BorderLayout
<http://docs.sencha.com/ext-js/3-4/#!/api/Ext.layout.BorderLayout>`_. This is
a layout that splits up the available browser viewport space into a center
region, surrounded by optional north, east, south and west regions. The
surrounding regions need to be configured with a width or height. The center
region takes the remaining space.

When creating reusable custom dialogs, it makes sense to extend
:class:`Ext.Container`. But sometimes dialogs are closely tied to toolbars at
the top or bottom, and this is where :class:`Ext.Panel` comes in handy.


Panels
------

`Ext.Panel
<http://docs.sencha.com/ext-js/3-4/#!/api/Ext.Panel>`_ is the component of
choice for everything that can have a title, toolbars and other elements
surrounding the content. Most specialized Ext components, like grids and trees,
are subclasses of :class:`Ext.Panel`.

The most commonly used features of panels are toolbars at the top and bottoms
for buttons and menus (the latter especially in the top toolbar). To add a
toolbar at the top, the :obj:`tbar` config option is used. To access that
toolbar later, use :meth:`getTopToolbar`. The bottom toolbar is configured
with :obj:`bbar`, and later accessed with :meth:`getBottomToolbar`. A good
overview of all kinds of buttons and menus is the `Toolbar with Menus
<http://dev.sencha.com/deploy/ext-3.4.0/examples/menu/menus.html>`_ example.


Windows
-------

`Ext.Window
<http://docs.sencha.com/ext-js/3-4/#!/api/Ext.Window>`_ is a special panel
that is not part of a layout, but can float on top of other components. This
component can be used to create popups. The window itself can host components
in a layout and have toolbars, like any other :class:`Ext.Panel` subclass. It
is also possible to create a window from existing markup, like shown in the
`Hello World Window
<http://dev.sencha.com/deploy/ext-3.4.0/examples/window/hello.html>`_ example.
